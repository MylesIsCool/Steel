buildscript {
    repositories {
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath 'nl.javadude.gradle.plugins:license-gradle-plugin:0.11.0'
    }
}

// apply Gradle plugins
plugins {
    id 'java'
    id 'maven'
    id 'eclipse'
    id 'idea'
    id 'checkstyle'
    id 'com.github.johnrengelman.shadow' version '1.2.0'
}

apply plugin: 'license'

defaultTasks 'clean', 'licenseFormat', 'build', 'shadowJar'

// Project information
group = 'net.caseif.flint.steel'
version = '1.2.3'

// Extended project information
ext.projectName = 'steel'
ext.description = 'The implementation of Flint minigame framework for the Bukkit Minecraft server mod.'
ext.inceptionYear = '2015'
ext.packaging = 'jar'

sourceCompatibility = '1.7'
targetCompatibility = '1.7'

configurations {
    shadow
    compile {
        extendsFrom shadow
    }
}

// Project repositories
repositories {
    mavenLocal()
    mavenCentral()
    maven { url 'http://repo.caseif.net/content/groups/public/' }
    maven { url 'http://repo.bukkit.org/content/groups/public/' }
    maven { url 'http://hub.spigotmc.org/nexus/content/groups/public/' }
    maven { url 'http://repo.gravitydevelopment.net' }
    maven { url 'http://repo.mcstats.org/content/repositories/public' }
}

ext {
    author = 'Max Roncace'

    versionSuffix = version.contains('SNAPSHOT') ? (
            (
                    System.getenv('GIT_COMMIT') ? ('-git('
                            + System.getenv('GIT_BRANCH')
                            .substring(System.getenv('GIT_BRANCH').split('/')[0].length() + 1) + '-'
                            + System.getenv('GIT_COMMIT').substring(0, 7) + ')') : ''
            )
                    + (System.getenv('BUILD_NUMBER') ? '-jnks' + System.getenv('BUILD_NUMBER') : '')
    ) : ''

    commonVersion = '1.2.1'

    guava = 'com.google.guava:guava:17.0'
    bukkit = 'org.bukkit:bukkit:1.8.8-R0.1-SNAPSHOT'
    common = 'net.caseif.flint.common:flintcommon:' + commonVersion
    metrics = 'org.mcstats.bukkit:metrics:R8-SNAPSHOT'
    updater = 'net.gravitydevelopment.updater:updater:2.3'
    jtelemetry = 'net.caseif.jtelemetry:jtelemetry:1.1.0'
    gson = 'com.google.code.gson:gson:2.2.4'
}

// Project dependencies
dependencies {
    compile guava
    compile bukkit
    shadow common
    shadow metrics
    shadow updater
    shadow jtelemetry
    shadow gson
}

// Read source files using UTF-8
tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

jar {
    classifier = 'base'
}

jar.manifest.mainAttributes(
        'Created-By': System.properties['java.vm.version'] + " (" + System.properties['java.vm.vendor'] + ")",
        'Specification-Title': 'Flint',
        'Specification-Version': '1.2',
        'Specification-Vendor': 'Max Roncace',
        'Implementation-Title': name,
        'Implementation-Version': version + versionSuffix,
        'Implementation-Vendor': author
)

processResources {
    from 'LICENSE'
    filter { String line -> line.replace('SNAPSHOT', 'SNAPSHOT' + versionSuffix) }
}

// License header formatting
license {
    header file('LICENSE')
    excludes([
            '**/*.properties',
            '**/*.yml'
    ])
    sourceSets = project.sourceSets
    ignoreFailures false
    strictCheck true
    mapping {
        java = 'SLASHSTAR_STYLE'
    }
}

// check code style
checkstyle {
    configProperties = [
            'name'        : project.name,
            'year'        : project.inceptionYear
    ]
    configFile = file('etc/checkstyle.xml')
}

tasks.withType(Checkstyle){
    exclude '**/*.properties'
    exclude '**/*.yml'
}

shadowJar {
    configurations = [project.configurations.shadow]
    dependencies {
        exclude dependency('com.google.guava:guava')
        exclude dependency('org.bukkit:bukkit')
    }
    classifier = ''

    relocate('net.gravitydevelopment.updater', 'net.caseif.flint.steel.lib.net.gravitydevelopment.updater')
    relocate('org.mcstats', 'net.caseif.flint.steel.lib.org.mcstats')
    relocate('net.caseif.jtelemetry', 'net.caseif.flint.steel.lib.net.caseif.jtelemetry')
    relocate('com.google.gson', 'net.caseif.flint.steel.lib.com.google.gson')
}

task sourceJar(type: Jar) {
    from sourceSets.main.java
    from sourceSets.main.resources
    classifier = 'sources'
}

artifacts {
    archives shadowJar
    archives sourceJar
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.8'
}
